import 'package:flutter/cupertino.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

import '../models/http_exception.dart';
import 'request.dart';

class RequestsProvider with ChangeNotifier {
  //A list of pre-loaded requests
  List<Request> _requestsItems = [];

  List<Request> get items {
    return [..._requestsItems]; //return a copy not the reference
  }

  Request findById(String id) {
    return items.firstWhere((request) => request.id == id);
  }

  Future<void> addRequest(Request request) async {
    print('ADD NEW REQUEST>>');
    //Send data to the server
    final url = Uri.parse(
        'https://wafar-cash-demo-default-rtdb.europe-west1.firebasedatabase.app/requests.json');
    try {
      final response = await http.post(
        url,
        body: json.encode({
          'userName': request.userName,
          'email': request.email,
          'store': request.store,
          'link': request.link,
        }),
      );
      //This will only runs after the previous block
      //It is invisibly wrapped in a "then" block
      final newRequest = Request(
          //Use the unique id generated by Flutter
          id: json.decode(response.body)['name'], //A unique id from Firebase
          userName: request.userName,
          email: request.email,
          store: request.store,
          link: request.link);
      //add the requests to the local list on top
      _requestsItems.insert(0, newRequest);
      notifyListeners();
    } catch (error) {
      throw error;
    }
  }

// Future<void> updateRequest(String id, Request newRequest) async {
//   final url = Uri.parse(
//       'https://wafar-cash-demo-default-rtdb.europe-west1.firebasedatabase.app/requests.json');
//   final requestIndex =
//       _requestsItems.indexWhere((request) => request.id == id);
//
//   if (requestIndex >= 0) {
//     try {
//       await http.patch(url,
//           body: json.encode({
//             'userName': newRequest.userName,
//             'email': newRequest.email,
//             'store': newRequest.store,
//             'link': newRequest.link,
//           }));
//     } catch (error) {
//       throw error;
//     }
//
//     _requestsItems[requestIndex] = newRequest;
//     notifyListeners();
//   }
// }

  Future<void> deleteRequest(String id) async {
    final url = Uri.parse(
        'https://wafar-cash-demo-default-rtdb.europe-west1.firebasedatabase.app/requests/$id.json');

    //perform Optimistic Updating
    final existingRequestIndex =
        _requestsItems.indexWhere((request) => request.id == id);
    var existingRequest = _requestsItems[existingRequestIndex]; //store a copy
    _requestsItems.removeAt(existingRequestIndex); //immediately delete
    notifyListeners();

    //Delete on the server and check errors
    final response = await http.delete(url);

    if (response.statusCode >= 400) {
      _requestsItems.insert(existingRequestIndex, existingRequest);
      notifyListeners();
      throw HttpException('Could not delete request'); //return
    }

    //if no problems occurred
    existingRequest = null; //remove it from memory
  }

  Future<void> fetchRequests() async {
    final url = Uri.parse(
        'https://wafar-cash-demo-default-rtdb.europe-west1.firebasedatabase.app/requests.json');
    try {
      final response = await http.get(url);
      final extractedData = json.decode(response.body) as Map<String, dynamic>;
      final List<Request> loadedRequestsList = [];

      extractedData.forEach((requestId, requestData) {
        loadedRequestsList.add(Request(
          id: requestId,
          userName: requestData['userName'],
          email: requestData['email'],
          store: requestData['store'],
          link: requestData['link'],
        ));
      });
      _requestsItems = loadedRequestsList;
      notifyListeners();
    } catch (error) {
      throw (error);
    }
  }
}
